{"version":3,"file":"static/js/718.e972bdd3.chunk.js","mappings":"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","sources":["components/common/NoItemFound.tsx","components/content/Pages/BreedsPage/BreedsList.tsx","redux/favourites-selectors.ts","components/content/Pages/FavouritiesPage/FavouritiesPage.tsx","components/content/Pages/VotingPage/VotingPage.tsx","redux/voting-selectors.ts","utils/usersActionLogsCreator.ts","webpack://pets-paw/./src/components/content/Pages/VotingPage/VotingPage.module.scss?bb96"],"sourcesContent":["import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { getIsBlack } from \"../../redux/theme-selectors\"\r\n\r\nconst NoItemFound: React.FC = () => {\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   const style = {\r\n      paddingLeft: '20px',\r\n      background: `${isBlack ? 'rgba(255, 255, 255, 0.05)' : '#F8F8F7'}`,\r\n      display: 'flex',\r\n      height: '60px',\r\n      borderRadius: '10px',\r\n      alignItems: 'center'\r\n   }\r\n\r\n   const textStyle = {\r\n      fontFamily: 'Jost',\r\n      fontStyle: 'normal',\r\n      fontWeight: '400',\r\n      fontSize: '16px',\r\n      lineHeight: '24px',\r\n      color: '#8C8C8C',\r\n   }\r\n\r\n   return <div style={style}>\r\n      <span style={textStyle}>No item found</span>\r\n   </div>\r\n}\r\n\r\nexport default NoItemFound","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { BreedsFilterType } from '../../../../redux/breeds-reducer';\r\nimport { GalleryFilterFormType } from '../../../../redux/images-reducer';\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\nimport { addToFavourite, deleteFavourite, getFavourites } from '../../../../redux/voting-reducer';\r\nimport { getFavByImageId, getFavouritesIds } from '../../../../redux/voting-selectors';\r\n\r\nimport classes from './BreedsPage.module.scss'\r\n\r\nconst notFoundImage = 'https://s5.favim.com/orig/151213/avatar-kot-profil-gav-Favim.ru-3761175.jpg'\r\n\r\ntype Props = {\r\n   breedsList: Array<any>\r\n   getItemsCount: (state: AppStateType) => number\r\n   photosFromGallery: boolean\r\n   prevNext: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => GalleryFilterFormType | BreedsFilterType\r\n}\r\n\r\nconst BreedsList: React.FC<Props> = ({ breedsList, getItemsCount, photosFromGallery, prevNext, getCurrentPage, getFilter }) => {\r\n\r\n   const navigate = useNavigate()\r\n   const getBreedId = (e: any) => {\r\n      navigate(`../breeds/info/${e.target.id}`, { replace: true })\r\n   }\r\n   //filter breeds list from API and create list of img\r\n   const breedPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            if (breed.image && breed.image.url) {\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id} onClick={(e: any) => getBreedId(e)}>\r\n\r\n                  <img src={breed.image.url} alt={breed.alt_names === '' ? breed.name : breed.alt_names} />\r\n                  <div id={breed.id}><span>{breed.name}</span></div>\r\n               </div>\r\n            } else {\r\n               const quest = breed.breeds ? breed.breeds[0].name : ''\r\n\r\n               const src = breed.url ? breed.url : notFoundImage\r\n               const name = breed.name ? breed.name : quest\r\n               const alt = breed.alt_names ? breed.alt_names :\r\n                  breed.name ? breed.name : quest\r\n\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id}>\r\n                  <img src={src} alt={!breed.alt_names ? name : alt} />\r\n                  <div><span><span>{name}</span></span></div>\r\n               </div>\r\n            }\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const location = useLocation()\r\n   const isGallery = location.pathname === '/gallery'\r\n\r\n   const dispatch = useDispatch<any>()\r\n\r\n\r\n   const addFavourite = async (breed_id: string) => {\r\n\r\n      await dispatch(addToFavourite(breed_id))\r\n\r\n   }\r\n   const removeFavourite = async (fav_id: string, breed_id: string) => {\r\n\r\n      await dispatch(deleteFavourite(fav_id, breed_id))\r\n   }\r\n   const favourites = useSelector(getFavouritesIds)\r\n\r\n   const favByImageId = useSelector(getFavByImageId)\r\n   useEffect(() => {\r\n      dispatch(getFavourites())\r\n   }, [])\r\n\r\n\r\n\r\n   const galleryPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            const fav_id = breed.favourite ? favByImageId[breed.id] : ''\r\n            return <div className={`${classes.grid__item} ${isGallery ? classes.grid__item_gallery : ''}`}\r\n               key={breed.id}>\r\n               <img src={breed.url} alt={breed.id} />\r\n               <div>\r\n                  {isGallery\r\n                     ? favourites.includes(breed.id)\r\n                        ? <button onClick={() => removeFavourite(fav_id, breed.id)} className={classes.remove}>remove to favourite</button>\r\n                        : <button onClick={() => addFavourite(breed.id)} className={classes.add}>add to favourite</button>\r\n                     : <span>{breed.id}</span>}\r\n               </div>\r\n            </div>\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={classes.breedsList}>\r\n      <div className={`${classes.grid__layout} ${isBlack && classes.black}`}>\r\n         {photosFromGallery ? galleryPhotos() : breedPhotos()}\r\n      </div>\r\n      <Paginator getItemsCount={getItemsCount} prevNext={prevNext} getCurrentPage={getCurrentPage} getFilter={getFilter} />\r\n   </div>\r\n}\r\n\r\ntype PaginatorType = {\r\n   getItemsCount: (state: AppStateType) => number\r\n   prevNext?: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => any\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({ getItemsCount, prevNext, getCurrentPage, getFilter }) => {\r\n   const dispatch = useDispatch<any>()\r\n   const location = useLocation()\r\n   const obj = new URLSearchParams(location.search)\r\n\r\n   //button prev and next should be hide if displaed breed by id \r\n   const shouldButtonDisplay = obj.get('breed_ids')\r\n\r\n   let currentPage = useSelector(getCurrentPage)\r\n   const filter = useSelector(getFilter)\r\n   const itemsCount = useSelector(getItemsCount)\r\n\r\n   const pagesCount = Math.floor(itemsCount / filter.limitItems)\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={`${classes.paginator} ${isBlack && classes.black}`}>\r\n      {!shouldButtonDisplay &&\r\n         <div>\r\n            {currentPage > 0 &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_prev}`}\r\n                  onClick={() => currentPage > 0 && prevNext && dispatch(prevNext('prev'))}\r\n               >PREV</button>}\r\n            {currentPage < pagesCount &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_next}`}\r\n                  onClick={() => currentPage < pagesCount && prevNext && dispatch(prevNext('next'))}\r\n               >NEXT</button>}\r\n         </div>}\r\n   </div>\r\n}\r\n\r\nexport default BreedsList\r\n\r\n","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const getFavList = (state: AppStateType) => {\r\n   return state.favourites.favouritesList\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n   return state.favourites.currentPage\r\n}\r\n\r\nexport const getLimit = (state: AppStateType) => {\r\n   return state.favourites.limit\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.favourites.isFetching\r\n}\r\n\r\nexport const getTotalCount = (state: AppStateType) => {\r\n   return state.favourites.totalImagesCount\r\n}\r\n\r\nexport const getUserActions = (state: AppStateType) => {\r\n   return state.favourites.userActions\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteFavourite } from '../../../../redux/voting-reducer';\r\nimport { getCurrentPage, getFavList, getIsFetching, getLimit, getTotalCount, getUserActions } from '../../../../redux/favourites-selectors';\r\nimport { Paginator } from '../BreedsPage/BreedsList';\r\nimport breedClasses from '../BreedsPage/BreedsPage.module.scss'\r\nimport votingClasses from '../VotingPage/VotingPage.module.scss'\r\nimport { actions, getFavouritesList } from '../../../../redux/favourites-reducer';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { UserActionLogs } from '../VotingPage/VotingPage';\r\nimport { addUserActionCreator } from '../../../../utils/usersActionLogsCreator';\r\nimport Preloader from '../../../common/Preloader';\r\nimport NoItemFound from '../../../common/NoItemFound';\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\n\r\nconst FavouritiesPage: React.FC = () => {\r\n   const dispatch = useDispatch<any>()\r\n\r\n   const limit = useSelector(getLimit)\r\n   let currentPage = useSelector(getCurrentPage)\r\n   const navigate = useNavigate()\r\n   const location = useLocation()\r\n   const search = new URLSearchParams(location.search)\r\n   useEffect(() => {\r\n      const actualPage: number = Number(search.get('page'))\r\n      navigate(`../favourities?page=${actualPage}`, { replace: true })\r\n\r\n      dispatch(getFavouritesList(limit, actualPage))\r\n   }, [])\r\n\r\n   useEffect(() => {\r\n      navigate(`../favourities?page=${currentPage}`, { replace: true })\r\n   }, [currentPage])\r\n\r\n   const favouritesList = useSelector(getFavList)\r\n\r\n   const removeFavourite = async (fav_id: string, breed_id: string) => {\r\n\r\n      await dispatch(deleteFavourite(fav_id, breed_id))\r\n      dispatch(getFavouritesList(limit, currentPage, false))\r\n   }\r\n\r\n   const galleryPhotos = () => {\r\n\r\n      if (favouritesList.length > 0) {\r\n         return favouritesList.map(breed => {\r\n            // const fav_id = breed.id\r\n            return <div className={`${breedClasses.grid__item} ${breedClasses.grid__item_gallery}`}\r\n               key={breed.id}>\r\n               <img src={breed.image.url} alt={breed.id} />\r\n               <div><button onClick={() => { removeFavourite(breed.id, breed.image.id); addUserAction(breed.image.id, null, 'remove') }} className={breedClasses.remove}>remove to favourite</button>\r\n               </div>\r\n            </div>\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n\r\n   const prevNext = (btn: 'prev' | 'next') => {\r\n      btn === 'prev' ? --currentPage : ++currentPage\r\n      return getFavouritesList(limit, currentPage)\r\n   }\r\n   const userActions = useSelector(getUserActions)\r\n\r\n   const addUserAction = addUserActionCreator(userActions, () => dispatch(actions.removeUserAction()), (userAction) => dispatch(actions.addUserAction(userAction)), 2)\r\n\r\n   const isFetching = useSelector(getIsFetching)\r\n   const isBlack = useSelector(getIsBlack)\r\n   return <>\r\n      {favouritesList.length === 0 &&\r\n         <NoItemFound />}\r\n      {!isFetching &&\r\n         <div className={breedClasses.breedsList}>\r\n            <div className={`${breedClasses.grid__layout} ${isBlack && breedClasses.black}`}>\r\n               {galleryPhotos()}\r\n\r\n            </div>\r\n            <div className={breedClasses.bottomWrapper}>\r\n               <div className={`${votingClasses.actionsWrapper} ${isBlack && votingClasses.black}`}>\r\n                  <UserActionLogs userActions={userActions} />\r\n               </div>\r\n               <Paginator getCurrentPage={getCurrentPage} getItemsCount={getTotalCount} getFilter={() => ({ limitItems: limit })} prevNext={prevNext} />\r\n            </div>\r\n\r\n         </div>\r\n      }\r\n      {\r\n         isFetching &&\r\n         <Preloader />\r\n      }\r\n   </>\r\n}\r\n\r\nexport default FavouritiesPage","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\nimport { actions, addToFavourite, BreedImageType, getRandomBreed, setVote, UsersActionType } from '../../../../redux/voting-reducer';\r\nimport { getBreedImage, getIsFetching, getUserActions } from '../../../../redux/voting-selectors';\r\nimport { addUserActionCreator } from '../../../../utils/usersActionLogsCreator';\r\nimport Preloader from '../../../common/Preloader';\r\nimport classes from './VotingPage.module.scss'\r\n\r\n\r\nconst VotingPage: React.FC = () => {\r\n   const isFetching = useSelector(getIsFetching)\r\n   const dispatch = useDispatch<any>()\r\n\r\n   useEffect(() => {\r\n      dispatch(getRandomBreed())\r\n   }, [])\r\n\r\n\r\n   const breedImage: BreedImageType = useSelector(getBreedImage)\r\n   const url = breedImage.url ? breedImage.url : ''\r\n   const id = breedImage.id ? breedImage.id : ''\r\n\r\n   const usersActions = useSelector(getUserActions)\r\n\r\n   const onVote = (value: 0 | 1) => {\r\n      if (id)\r\n         dispatch(setVote(id, value))\r\n      if (!isFetching) {\r\n         addUserAction(id, value, 'add')\r\n         dispatch(getRandomBreed())\r\n      }\r\n   }\r\n   const addUserAction = addUserActionCreator(usersActions, () => dispatch(actions.removeUserAction()), (userAction) => dispatch(actions.addUserAction(userAction)))\r\n\r\n\r\n   const toFavourite = () => {\r\n      if (id)\r\n         dispatch(addToFavourite(id))\r\n      if (!isFetching) {\r\n         addUserAction(id, null, 'add')\r\n         dispatch(getRandomBreed())\r\n      }\r\n   }\r\n\r\n   const userActions = useSelector(getUserActions)\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={`${classes.votingPage} ${isBlack && classes.black}`}>\r\n      <div className={classes.imagesWrapper}>\r\n         {!isFetching &&\r\n            <img src={url} alt=\"\" />}\r\n         {isFetching &&\r\n            <Preloader />}\r\n         <div className={classes.btnContainer}>\r\n            <div>\r\n               <button onClick={() => onVote(1)}>like</button>\r\n               <button onClick={toFavourite}>favourite</button>\r\n               <button onClick={() => onVote(0)}>dislike</button>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <div className={`${classes.actionsWrapper} ${isBlack && classes.black}`}>\r\n         <UserActionLogs userActions={userActions} />\r\n      </div>\r\n   </div>\r\n}\r\n\r\nexport const UserActionLogs: React.FC<{ userActions: Array<UsersActionType> }> = ({ userActions }) => {\r\n   const createUserActions = (userActions: Array<UsersActionType> | null) => {\r\n      if (userActions) {\r\n         return userActions.map((action, index) => {\r\n            return <div className={`${classes.action} ${action.action === 'added to' && classes[`action_${action.type}`]}`} key={index}>\r\n               <span className={classes.time}>\r\n                  <span>{action.time}</span>\r\n               </span>\r\n               <span className={classes.text}>\r\n                  Image ID: <span>{action.id}</span> was {action.action} {action.type}\r\n               </span>\r\n            </div>\r\n         })\r\n      }\r\n      else {\r\n         return ''\r\n      }\r\n   }\r\n\r\n   return <>{createUserActions(userActions)}</>\r\n}\r\n\r\nexport default VotingPage","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const getBreedImage = (state: AppStateType) => {\r\n   return state.voting.breedImage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.voting.isFetching\r\n}\r\n\r\nexport const getUserActions = (state: AppStateType) => {\r\n   return state.voting.userActions\r\n}\r\n\r\nexport const getFavouritesIds = (state: AppStateType) => {\r\n   return state.voting.favourites\r\n}\r\n\r\nexport const getFavByImageId = (state: AppStateType) => {\r\n   return state.voting.favByImageId\r\n}\r\n\r\n\r\n","import { UsersActionType } from \"../redux/voting-reducer\"\r\n\r\nexport const addUserActionCreator = (usersActions: Array<UsersActionType>, removeUserAction: () => void, addUserAction: (userAction: UsersActionType) => void, maxLength = 4) => (id: string, value: 0 | 1 | null, action: 'add' | 'remove') => {\r\n   const type = (() => {\r\n      switch (value) {\r\n         case 0:\r\n            return 'Dislikes'\r\n         case 1:\r\n            return 'Likes'\r\n         default:\r\n            return 'Favourites'\r\n      }\r\n   })()\r\n\r\n   if (usersActions.length >= maxLength) {\r\n      removeUserAction()\r\n   }\r\n\r\n   const act = (() => {\r\n      switch (action) {\r\n         case 'add':\r\n            return 'added to'\r\n         default:\r\n            return 'removed from'\r\n      }\r\n   })()\r\n\r\n   const userAction: UsersActionType = {\r\n      id: id,\r\n      action: act,\r\n      time: actualTime(),\r\n      type: type\r\n   }\r\n\r\n\r\n   addUserAction(userAction)\r\n}\r\n\r\nconst actualTime = () => {\r\n   const data = new Date\r\n   const hours = data.getHours() < 10 ? `0${data.getHours()}` : `${data.getHours()}`\r\n   const minutes = data.getMinutes() < 10 ? `0${data.getMinutes()}` : `${data.getMinutes()}`\r\n\r\n   return `${hours}:${minutes}`\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"votingPage\":\"VotingPage_votingPage__JuxDw\",\"imagesWrapper\":\"VotingPage_imagesWrapper__agQ70\",\"btnContainer\":\"VotingPage_btnContainer__zlwqY\",\"actionsWrapper\":\"VotingPage_actionsWrapper__WjmkA\",\"action\":\"VotingPage_action__f0xxB\",\"time\":\"VotingPage_time__Gyv-m\",\"text\":\"VotingPage_text__btIGr\",\"action_Likes\":\"VotingPage_action_Likes__vWV4R\",\"action_Favourites\":\"VotingPage_action_Favourites__k97FZ\",\"action_Dislikes\":\"VotingPage_action_Dislikes__6w8jh\",\"black\":\"VotingPage_black__BpwCE\"};"],"names":["isBlack","useSelector","getIsBlack","style","paddingLeft","background","display","height","borderRadius","alignItems","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","color","Paginator","getItemsCount","prevNext","getCurrentPage","getFilter","dispatch","useDispatch","location","useLocation","shouldButtonDisplay","URLSearchParams","search","get","currentPage","filter","itemsCount","pagesCount","Math","floor","limitItems","className","classes","type","onClick","breedsList","photosFromGallery","navigate","useNavigate","isGallery","pathname","addFavourite","breed_id","addToFavourite","removeFavourite","fav_id","deleteFavourite","favourites","getFavouritesIds","favByImageId","getFavByImageId","useEffect","getFavourites","length","map","breed","favourite","id","src","url","alt","includes","image","e","target","replace","getBreedId","alt_names","name","quest","breeds","getFavList","state","favouritesList","getLimit","limit","getIsFetching","isFetching","getTotalCount","totalImagesCount","getUserActions","userActions","actualPage","Number","getFavouritesList","addUserAction","addUserActionCreator","actions","userAction","NoItemFound","breedClasses","votingClasses","UserActionLogs","btn","Preloader","action","index","time","createUserActions","getRandomBreed","breedImage","getBreedImage","usersActions","onVote","value","setVote","voting","removeUserAction","maxLength","actualTime","data","Date","hours","getHours","minutes","getMinutes"],"sourceRoot":""}