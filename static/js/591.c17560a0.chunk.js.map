{"version":3,"file":"static/js/591.c17560a0.chunk.js","mappings":"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","sources":["components/content/Pages/BreedsPage/BreedsList.tsx","redux/images-selectors.ts","webpack://pets-paw/./src/components/content/Pages/GalleryPage/GalleryFilterForm.module.scss?5b2e","components/content/Pages/GalleryPage/GalleryFilterForm.tsx","components/content/Pages/GalleryPage/GalleryPage.tsx","redux/voting-selectors.ts"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { BreedsFilterType } from '../../../../redux/breeds-reducer';\r\nimport { GalleryFilterFormType } from '../../../../redux/images-reducer';\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\nimport { addToFavourite, deleteFavourite, getFavourites } from '../../../../redux/voting-reducer';\r\nimport { getFavByImageId, getFavouritesIds } from '../../../../redux/voting-selectors';\r\n\r\nimport classes from './BreedsPage.module.scss'\r\n\r\nconst notFoundImage = 'https://s5.favim.com/orig/151213/avatar-kot-profil-gav-Favim.ru-3761175.jpg'\r\n\r\ntype Props = {\r\n   breedsList: Array<any>\r\n   getItemsCount: (state: AppStateType) => number\r\n   photosFromGallery: boolean\r\n   prevNext: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => GalleryFilterFormType | BreedsFilterType\r\n}\r\n\r\nconst BreedsList: React.FC<Props> = ({ breedsList, getItemsCount, photosFromGallery, prevNext, getCurrentPage, getFilter }) => {\r\n\r\n   const navigate = useNavigate()\r\n   const getBreedId = (e: any) => {\r\n      navigate(`../breeds/info/${e.target.id}`, { replace: true })\r\n   }\r\n   //filter breeds list from API and create list of img\r\n   const breedPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            if (breed.image && breed.image.url) {\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id} onClick={(e: any) => getBreedId(e)}>\r\n\r\n                  <img src={breed.image.url} alt={breed.alt_names === '' ? breed.name : breed.alt_names} />\r\n                  <div id={breed.id}><span>{breed.name}</span></div>\r\n               </div>\r\n            } else {\r\n               const quest = breed.breeds ? breed.breeds[0].name : ''\r\n\r\n               const src = breed.url ? breed.url : notFoundImage\r\n               const name = breed.name ? breed.name : quest\r\n               const alt = breed.alt_names ? breed.alt_names :\r\n                  breed.name ? breed.name : quest\r\n\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id}>\r\n                  <img src={src} alt={!breed.alt_names ? name : alt} />\r\n                  <div><span><span>{name}</span></span></div>\r\n               </div>\r\n            }\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const location = useLocation()\r\n   const isGallery = location.pathname === '/gallery'\r\n\r\n   const dispatch = useDispatch<any>()\r\n\r\n\r\n   const addFavourite = async (breed_id: string) => {\r\n\r\n      await dispatch(addToFavourite(breed_id))\r\n\r\n   }\r\n   const removeFavourite = async (fav_id: string, breed_id: string) => {\r\n\r\n      await dispatch(deleteFavourite(fav_id, breed_id))\r\n   }\r\n   const favourites = useSelector(getFavouritesIds)\r\n\r\n   const favByImageId = useSelector(getFavByImageId)\r\n   useEffect(() => {\r\n      dispatch(getFavourites())\r\n   }, [])\r\n\r\n\r\n\r\n   const galleryPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            const fav_id = breed.favourite ? favByImageId[breed.id] : ''\r\n            return <div className={`${classes.grid__item} ${isGallery ? classes.grid__item_gallery : ''}`}\r\n               key={breed.id}>\r\n               <img src={breed.url} alt={breed.id} />\r\n               <div>\r\n                  {isGallery\r\n                     ? favourites.includes(breed.id)\r\n                        ? <button onClick={() => removeFavourite(fav_id, breed.id)} className={classes.remove}>remove to favourite</button>\r\n                        : <button onClick={() => addFavourite(breed.id)} className={classes.add}>add to favourite</button>\r\n                     : <span>{breed.id}</span>}\r\n               </div>\r\n            </div>\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={classes.breedsList}>\r\n      <div className={`${classes.grid__layout} ${isBlack && classes.black}`}>\r\n         {photosFromGallery ? galleryPhotos() : breedPhotos()}\r\n      </div>\r\n      <Paginator getItemsCount={getItemsCount} prevNext={prevNext} getCurrentPage={getCurrentPage} getFilter={getFilter} />\r\n   </div>\r\n}\r\n\r\ntype PaginatorType = {\r\n   getItemsCount: (state: AppStateType) => number\r\n   prevNext?: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => any\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({ getItemsCount, prevNext, getCurrentPage, getFilter }) => {\r\n   const dispatch = useDispatch<any>()\r\n   const location = useLocation()\r\n   const obj = new URLSearchParams(location.search)\r\n\r\n   //button prev and next should be hide if displaed breed by id \r\n   const shouldButtonDisplay = obj.get('breed_ids')\r\n\r\n   let currentPage = useSelector(getCurrentPage)\r\n   const filter = useSelector(getFilter)\r\n   const itemsCount = useSelector(getItemsCount)\r\n\r\n   const pagesCount = Math.floor(itemsCount / filter.limitItems)\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={`${classes.paginator} ${isBlack && classes.black}`}>\r\n      {!shouldButtonDisplay &&\r\n         <div>\r\n            {currentPage > 0 &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_prev}`}\r\n                  onClick={() => currentPage > 0 && prevNext && dispatch(prevNext('prev'))}\r\n               >PREV</button>}\r\n            {currentPage < pagesCount &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_next}`}\r\n                  onClick={() => currentPage < pagesCount && prevNext && dispatch(prevNext('next'))}\r\n               >NEXT</button>}\r\n         </div>}\r\n   </div>\r\n}\r\n\r\nexport default BreedsList\r\n\r\n","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const getImagesList = (state: AppStateType) => {\r\n   return state.images.imagesList\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n   return state.images.currentPage\r\n}\r\n\r\nexport const getFilter = (state: AppStateType) => {\r\n   return state.images.filter\r\n}\r\n\r\nexport const getImagesCount = (state: AppStateType) => {\r\n   return state.images.totalImagesCount\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.images.isFetching\r\n}\r\n\r\nexport const getDisFav = (state: AppStateType) => {\r\n   return state.images.displayedFavourites\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"galleryFilterForm\":\"GalleryFilterForm_galleryFilterForm__72d6H\",\"update\":\"GalleryFilterForm_update__QBAXH\",\"fieldWrapper\":\"GalleryFilterForm_fieldWrapper__JHNpO\",\"selectField\":\"GalleryFilterForm_selectField__OtinP\",\"element\":\"GalleryFilterForm_element__eRq-i\",\"black\":\"GalleryFilterForm_black__MBJ7V\"};","import { Field, Formik } from 'formik';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getBreedsListNamesThunk } from '../../../../redux/breeds-reducer';\r\nimport { getBreedsNamesList } from '../../../../redux/breeds-selectors';\r\nimport { GalleryFilterFormType, getImagesListThunk } from '../../../../redux/images-reducer';\r\nimport { getFilter } from '../../../../redux/images-selectors';\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\nimport classes from './GalleryFilterForm.module.scss'\r\n\r\nconst GalleryFilterForm: React.FC = () => {\r\n   const dispatch = useDispatch<any>()\r\n\r\n   useEffect(() => {\r\n      dispatch(getBreedsListNamesThunk())\r\n   }, [])\r\n\r\n   const { order, type, filterByBreed, limitItems } = useSelector(getFilter)\r\n\r\n   const onSubmit = (filter: GalleryFilterFormType) => {\r\n      // dispatch(actions.setFilter(filter))\r\n\r\n      dispatch(getImagesListThunk(filter, 0))\r\n   }\r\n\r\n   //generate limitItems options values \r\n   const limits: Array<Number> = []\r\n   for (let i = 5; i <= 20; i += 5) {\r\n      limits.push(i)\r\n   }\r\n\r\n   const breedsNamesList: any = useSelector(getBreedsNamesList)\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={`${classes.galleryFilterForm} ${isBlack && classes.black}`}>\r\n      <Formik\r\n         enableReinitialize\r\n         initialValues={{ order: order, type: type, filterByBreed: filterByBreed, limitItems: limitItems } as GalleryFilterFormType}\r\n         onSubmit={onSubmit}\r\n      >{(props) => (\r\n         <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n               <label>ORDER</label>\r\n               <Field as=\"select\" name=\"order\" className={`${classes.selectField} ${classes.element}`}\r\n                  onChange={props.handleChange}>\r\n                  <option value=\"RANDOM\">Random</option>\r\n                  <option value=\"DESC\">Desc</option>\r\n                  <option value=\"ASC\">Asc</option>\r\n               </Field>\r\n            </div>\r\n            <div className={classes.fieldWrapper}>\r\n               <label>TYPE</label>\r\n               <Field as=\"select\" name=\"type\" className={`${classes.selectField} ${classes.element}`}\r\n                  onChange={props.handleChange}>\r\n                  <option value=\"all\">All</option>\r\n                  <option value=\"static\">Static</option>\r\n                  <option value=\"animated\">Animated</option>\r\n               </Field>\r\n            </div>\r\n            <div className={classes.fieldWrapper}>\r\n               <label>BREED</label>\r\n               <Field as=\"select\" name=\"filterByBreed\" className={`${classes.selectField} ${classes.element}`}\r\n                  onChange={props.handleChange}>\r\n                  <option value=\"\">None</option>\r\n                  {\r\n                     Object.keys(breedsNamesList).map((key) => {\r\n                        return <option value={key} key={key}>{breedsNamesList[key]}</option>\r\n                     })\r\n                  }\r\n               </Field>\r\n            </div>\r\n            <div className={classes.fieldWrapper}>\r\n               <label>LIMIT</label>\r\n               <Field component=\"select\" name=\"limitItems\" className={`${classes.selectField} ${classes.element}`}\r\n                  onChange={props.handleChange}>\r\n                  {limits.map(limit => <option value={`${limit}`} key={`${limit}`}>{`${limit} items per page`}</option>)}\r\n               </Field>\r\n               <button type='submit' className={`${classes.update} ${classes.element}`}>submit</button>\r\n            </div>\r\n         </form>\r\n      )}\r\n      </Formik>\r\n   </div>\r\n\r\n}\r\n\r\nexport default GalleryFilterForm","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { GalleryFilterFormType, getImagesListThunk, ImgTypeType, OrderType } from '../../../../redux/images-reducer';\r\nimport { getCurrentPage, getFilter, getImagesCount, getImagesList, getIsFetching } from '../../../../redux/images-selectors';\r\nimport Preloader from '../../../common/Preloader';\r\nimport BreedsList from '../BreedsPage/BreedsList';\r\nimport GalleryFilterForm from './GalleryFilterForm';\r\n\r\nconst GalleryPage: React.FC = () => {\r\n\r\n   const imagesList = useSelector(getImagesList)\r\n   let currentPage = useSelector(getCurrentPage)\r\n   const filter = useSelector(getFilter)\r\n\r\n   const dispatch = useDispatch<any>()\r\n\r\n   const navigate = useNavigate()\r\n   const location = useLocation()\r\n\r\n   useEffect(() => {\r\n      const { order, filterByBreed, limitItems, type } = filter\r\n      const breed_id = filterByBreed ? `&breed_id=${filterByBreed}` : ''\r\n      const qType = () => {\r\n         switch (type) {\r\n            case 'static':\r\n               return 'jpg,png'\r\n            case 'animated':\r\n               return 'gif'\r\n            default: return 'gif,jpg,png'\r\n         }\r\n      }\r\n      navigate(`../gallery?page=${currentPage}&limit=${limitItems}&order=${order}&mime_types=${qType()}${breed_id}`, { replace: true })\r\n   }, [filter, currentPage])\r\n\r\n   useEffect(() => {\r\n      const search = new URLSearchParams(location.search)\r\n\r\n      const actualLimitItems: number = Number(search.get('limit') ? search.get('limit') : 5)\r\n      const actualOrder: OrderType = search.get('order') === 'ASC' ? \"ASC\" : search.get('order') === 'DESC' ? 'DESC' : 'RANDOM'\r\n      const actualfilterByBreed: string = String(search.get('breed_id') ? search.get('breed_id') : '')\r\n      const actualType: ImgTypeType = (() => {\r\n         switch (search.get('mime_types')) {\r\n            case 'gif':\r\n               return 'animated'\r\n            case 'jpg,png':\r\n               return 'static'\r\n            default:\r\n               return 'all'\r\n         }\r\n      })()\r\n      const actualPage: number = Number(search.get('page'))\r\n\r\n      const actualFilter: GalleryFilterFormType = {\r\n         filterByBreed: actualfilterByBreed,\r\n         limitItems: actualLimitItems,\r\n         order: actualOrder,\r\n         type: actualType\r\n      }\r\n\r\n      navigate(`../gallery?page=${actualPage}&limit=${actualLimitItems}&order=${actualOrder}&mime_types=${actualType}`, { replace: true })\r\n\r\n      dispatch(getImagesListThunk(actualFilter, actualPage))\r\n   }, [])\r\n\r\n   const prevNext = (btn: 'prev' | 'next') => {\r\n      btn === 'prev' ? --currentPage : ++currentPage\r\n      return getImagesListThunk(filter, currentPage)\r\n   }\r\n\r\n   const isFetching = useSelector(getIsFetching)\r\n\r\n   return <>\r\n      <GalleryFilterForm />\r\n      {isFetching &&\r\n         <Preloader />\r\n      }\r\n      {!isFetching &&\r\n         <BreedsList\r\n            breedsList={imagesList}\r\n            getItemsCount={getImagesCount}\r\n            photosFromGallery={true} prevNext={prevNext}\r\n            getCurrentPage={getCurrentPage}\r\n            getFilter={getFilter} />\r\n      }\r\n   </>\r\n}\r\n\r\nexport default GalleryPage\r\n","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const getBreedImage = (state: AppStateType) => {\r\n   return state.voting.breedImage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.voting.isFetching\r\n}\r\n\r\nexport const getUserActions = (state: AppStateType) => {\r\n   return state.voting.userActions\r\n}\r\n\r\nexport const getFavouritesIds = (state: AppStateType) => {\r\n   return state.voting.favourites\r\n}\r\n\r\nexport const getFavByImageId = (state: AppStateType) => {\r\n   return state.voting.favByImageId\r\n}\r\n\r\n\r\n"],"names":["Paginator","getItemsCount","prevNext","getCurrentPage","getFilter","dispatch","useDispatch","location","useLocation","shouldButtonDisplay","URLSearchParams","search","get","currentPage","useSelector","filter","itemsCount","pagesCount","Math","floor","limitItems","isBlack","getIsBlack","className","classes","type","onClick","breedsList","photosFromGallery","navigate","useNavigate","isGallery","pathname","addFavourite","breed_id","addToFavourite","removeFavourite","fav_id","deleteFavourite","favourites","getFavouritesIds","favByImageId","getFavByImageId","useEffect","getFavourites","length","map","breed","favourite","id","src","url","alt","includes","image","e","target","replace","getBreedId","alt_names","name","quest","breeds","getImagesList","state","images","imagesList","getImagesCount","totalImagesCount","getIsFetching","isFetching","getBreedsListNamesThunk","order","filterByBreed","limits","i","push","breedsNamesList","getBreedsNamesList","enableReinitialize","initialValues","onSubmit","getImagesListThunk","props","handleSubmit","as","onChange","handleChange","value","Object","keys","key","component","limit","qType","actualLimitItems","Number","actualOrder","actualfilterByBreed","String","actualType","actualPage","actualFilter","Preloader","BreedsList","btn","getBreedImage","voting","breedImage","getUserActions","userActions"],"sourceRoot":""}