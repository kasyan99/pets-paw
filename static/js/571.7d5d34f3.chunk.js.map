{"version":3,"file":"static/js/571.7d5d34f3.chunk.js","mappings":"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","sources":["components/content/Pages/BreedsPage/BreedsList.tsx","components/content/Pages/BreedsPage/BreedsPage.tsx","redux/voting-selectors.ts"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { BreedsFilterType } from '../../../../redux/breeds-reducer';\r\nimport { GalleryFilterFormType } from '../../../../redux/images-reducer';\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\nimport { getIsBlack } from '../../../../redux/theme-selectors';\r\nimport { addToFavourite, deleteFavourite, getFavourites } from '../../../../redux/voting-reducer';\r\nimport { getFavByImageId, getFavouritesIds } from '../../../../redux/voting-selectors';\r\n\r\nimport classes from './BreedsPage.module.scss'\r\n\r\nconst notFoundImage = 'https://s5.favim.com/orig/151213/avatar-kot-profil-gav-Favim.ru-3761175.jpg'\r\n\r\ntype Props = {\r\n   breedsList: Array<any>\r\n   getItemsCount: (state: AppStateType) => number\r\n   photosFromGallery: boolean\r\n   prevNext: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => GalleryFilterFormType | BreedsFilterType\r\n}\r\n\r\nconst BreedsList: React.FC<Props> = ({ breedsList, getItemsCount, photosFromGallery, prevNext, getCurrentPage, getFilter }) => {\r\n\r\n   const navigate = useNavigate()\r\n   const getBreedId = (e: any) => {\r\n      navigate(`../breeds/info/${e.target.id}`, { replace: true })\r\n   }\r\n   //filter breeds list from API and create list of img\r\n   const breedPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            if (breed.image && breed.image.url) {\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id} onClick={(e: any) => getBreedId(e)}>\r\n\r\n                  <img src={breed.image.url} alt={breed.alt_names === '' ? breed.name : breed.alt_names} />\r\n                  <div id={breed.id}><span>{breed.name}</span></div>\r\n               </div>\r\n            } else {\r\n               const quest = breed.breeds ? breed.breeds[0].name : ''\r\n\r\n               const src = breed.url ? breed.url : notFoundImage\r\n               const name = breed.name ? breed.name : quest\r\n               const alt = breed.alt_names ? breed.alt_names :\r\n                  breed.name ? breed.name : quest\r\n\r\n               return <div className={classes.grid__item}\r\n                  key={breed.id}>\r\n                  <img src={src} alt={!breed.alt_names ? name : alt} />\r\n                  <div><span><span>{name}</span></span></div>\r\n               </div>\r\n            }\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const location = useLocation()\r\n   const isGallery = location.pathname === '/gallery'\r\n\r\n   const dispatch = useDispatch<any>()\r\n\r\n\r\n   const addFavourite = async (breed_id: string) => {\r\n\r\n      await dispatch(addToFavourite(breed_id))\r\n\r\n   }\r\n   const removeFavourite = async (fav_id: string, breed_id: string) => {\r\n\r\n      await dispatch(deleteFavourite(fav_id, breed_id))\r\n   }\r\n   const favourites = useSelector(getFavouritesIds)\r\n\r\n   const favByImageId = useSelector(getFavByImageId)\r\n   useEffect(() => {\r\n      dispatch(getFavourites())\r\n   }, [])\r\n\r\n\r\n\r\n   const galleryPhotos = () => {\r\n\r\n      if (breedsList.length > 0) {\r\n         return breedsList.map(breed => {\r\n            const fav_id = breed.favourite ? favByImageId[breed.id] : ''\r\n            return <div className={`${classes.grid__item} ${isGallery ? classes.grid__item_gallery : ''}`}\r\n               key={breed.id}>\r\n               <img src={breed.url} alt={breed.id} />\r\n               <div>\r\n                  {isGallery\r\n                     ? favourites.includes(breed.id)\r\n                        ? <button onClick={() => removeFavourite(fav_id, breed.id)} className={classes.remove}>remove to favourite</button>\r\n                        : <button onClick={() => addFavourite(breed.id)} className={classes.add}>add to favourite</button>\r\n                     : <span>{breed.id}</span>}\r\n               </div>\r\n            </div>\r\n         })\r\n\r\n      } else {\r\n         return <></>\r\n      }\r\n   }\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={classes.breedsList}>\r\n      <div className={`${classes.grid__layout} ${isBlack && classes.black}`}>\r\n         {photosFromGallery ? galleryPhotos() : breedPhotos()}\r\n      </div>\r\n      <Paginator getItemsCount={getItemsCount} prevNext={prevNext} getCurrentPage={getCurrentPage} getFilter={getFilter} />\r\n   </div>\r\n}\r\n\r\ntype PaginatorType = {\r\n   getItemsCount: (state: AppStateType) => number\r\n   prevNext?: (btn: 'prev' | 'next') => void\r\n   getCurrentPage: (state: AppStateType) => number\r\n   getFilter: (state: AppStateType) => any\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({ getItemsCount, prevNext, getCurrentPage, getFilter }) => {\r\n   const dispatch = useDispatch<any>()\r\n   const location = useLocation()\r\n   const obj = new URLSearchParams(location.search)\r\n\r\n   //button prev and next should be hide if displaed breed by id \r\n   const shouldButtonDisplay = obj.get('breed_ids')\r\n\r\n   let currentPage = useSelector(getCurrentPage)\r\n   const filter = useSelector(getFilter)\r\n   const itemsCount = useSelector(getItemsCount)\r\n\r\n   const pagesCount = Math.floor(itemsCount / filter.limitItems)\r\n\r\n   const isBlack = useSelector(getIsBlack)\r\n\r\n   return <div className={`${classes.paginator} ${isBlack && classes.black}`}>\r\n      {!shouldButtonDisplay &&\r\n         <div>\r\n            {currentPage > 0 &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_prev}`}\r\n                  onClick={() => currentPage > 0 && prevNext && dispatch(prevNext('prev'))}\r\n               >PREV</button>}\r\n            {currentPage < pagesCount &&\r\n               <button type='button'\r\n                  className={`${classes.element} ${classes.btn} ${classes.btn_next}`}\r\n                  onClick={() => currentPage < pagesCount && prevNext && dispatch(prevNext('next'))}\r\n               >NEXT</button>}\r\n         </div>}\r\n   </div>\r\n}\r\n\r\nexport default BreedsList\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { getBreedsListThunk, getTotalBreedsCount } from '../../../../redux/breeds-reducer';\r\nimport { getBreedsCount, getBreedsList, getCurrentPage, getFilter, getIsFetching, getOrder } from '../../../../redux/breeds-selectors';\r\nimport Preloader from '../../../common/Preloader';\r\nimport { BreedsFilterFormType } from './BreedsFilterForm';\r\nimport BreedsList from './BreedsList';\r\n\r\nconst BreedsPage: React.FC = () => {\r\n\r\n   const breedsList = useSelector(getBreedsList)\r\n   const order = useSelector(getOrder)\r\n   const filter = useSelector(getFilter)\r\n   const isFetching = useSelector(getIsFetching)\r\n   let page = useSelector(getCurrentPage)\r\n\r\n   const dispatch = useDispatch<any>()\r\n\r\n   const navigate = useNavigate()\r\n   const location = useLocation()\r\n\r\n   useEffect(() => {\r\n\r\n      if (filter.filterByBreed === '') {\r\n         const limit = filter.limitItems ? `&limit=${filter.limitItems}` : ''\r\n         const qOrder = order === 'DESC' ? `&order=${order}` : ''\r\n         navigate(`../breeds?page=${page}${limit}${qOrder}`, { replace: true })\r\n      } else {\r\n         navigate(`../breeds/images/search?breed_ids=${filter.filterByBreed}`, { replace: true })\r\n      }\r\n\r\n\r\n   }, [filter.limitItems, page, order, filter.filterByBreed])\r\n\r\n\r\n   useEffect(() => {\r\n      dispatch(getTotalBreedsCount())\r\n      const obj = new URLSearchParams(location.search)\r\n\r\n      const breeds_ids: string | null = obj.get('breed_ids')\r\n\r\n      const initialLimitItems: number = Number(obj.get('limit'))\r\n\r\n      //prevent wrong limit items\r\n      const actualLimitItems: number = initialLimitItems < 5 ? 5 : initialLimitItems > 20 ? 20 : (Math.ceil(initialLimitItems / 5) * 5)\r\n\r\n      const limit = actualLimitItems ? `&limit=${actualLimitItems}` : ''\r\n\r\n      const currentPage: number = Number(obj.get('page'))\r\n      const initialOrder: 'DESC' | 'ASC' = obj.get('order') ? 'DESC' : 'ASC'\r\n\r\n      const actualOrder: string = initialOrder === 'DESC' ? `order=${initialOrder}` : ''\r\n\r\n      if (breeds_ids) {\r\n         navigate(`../breeds/images/search?breed_ids=${breeds_ids}`, { replace: true })\r\n      } else {\r\n         navigate(`../breeds?page=${currentPage}${limit}${actualOrder}`, { replace: true })\r\n      }\r\n      const values: BreedsFilterFormType = {\r\n         filterByBreed: breeds_ids ? breeds_ids : filter.filterByBreed,\r\n         limitItems: actualLimitItems\r\n      }\r\n\r\n      dispatch(getBreedsListThunk(values, currentPage, initialOrder))\r\n\r\n\r\n   }, [])\r\n   const prevNext = (btn: 'prev' | 'next') => {\r\n      btn === 'prev' ? --page : ++page\r\n      return getBreedsListThunk(filter, page, order)\r\n   }\r\n\r\n   return <>\r\n      {isFetching &&\r\n         <Preloader />\r\n      }\r\n      {!isFetching &&\r\n         <BreedsList\r\n            breedsList={breedsList}\r\n            getItemsCount={getBreedsCount}\r\n            prevNext={prevNext}\r\n            photosFromGallery={false}\r\n            getCurrentPage={getCurrentPage}\r\n            getFilter={getFilter} />\r\n      }</>\r\n\r\n}\r\n\r\nexport default BreedsPage","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const getBreedImage = (state: AppStateType) => {\r\n   return state.voting.breedImage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.voting.isFetching\r\n}\r\n\r\nexport const getUserActions = (state: AppStateType) => {\r\n   return state.voting.userActions\r\n}\r\n\r\nexport const getFavouritesIds = (state: AppStateType) => {\r\n   return state.voting.favourites\r\n}\r\n\r\nexport const getFavByImageId = (state: AppStateType) => {\r\n   return state.voting.favByImageId\r\n}\r\n\r\n\r\n"],"names":["Paginator","getItemsCount","prevNext","getCurrentPage","getFilter","dispatch","useDispatch","location","useLocation","shouldButtonDisplay","URLSearchParams","search","get","currentPage","useSelector","filter","itemsCount","pagesCount","Math","floor","limitItems","isBlack","getIsBlack","className","classes","type","onClick","breedsList","photosFromGallery","navigate","useNavigate","isGallery","pathname","addFavourite","breed_id","addToFavourite","removeFavourite","fav_id","deleteFavourite","favourites","getFavouritesIds","favByImageId","getFavByImageId","useEffect","getFavourites","length","map","breed","favourite","id","src","url","alt","includes","image","e","target","replace","getBreedId","alt_names","name","quest","breeds","getBreedsList","order","getOrder","isFetching","getIsFetching","page","filterByBreed","limit","qOrder","getTotalBreedsCount","obj","breeds_ids","initialLimitItems","Number","actualLimitItems","ceil","initialOrder","actualOrder","values","getBreedsListThunk","getBreedsCount","btn","getBreedImage","state","voting","breedImage","getUserActions","userActions"],"sourceRoot":""}